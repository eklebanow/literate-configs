DOOM Emacs Config
#+PROPERTY: header-args :tangle /home/eklebanow/.doom.d/config.el

* TABLE OF CONTENTS :toc:
- [[#introduction][Introduction:]]
- [[#email-config-using-mbsync-and-mu4e][Email config using Mbsync and Mu4e]]
- [[#elfeed-config-for-rss-feeds][Elfeed Config for RSS Feeds]]
- [[#config-for-irc-chat-using-circe][Config for IRC Chat Using Circe:]]
- [[#config-for-org-mode][Config for Org-Mode:]]
- [[#config-for-vuiet-music-player][Config for Vuiet Music Player:]]
- [[#eshell-config][Eshell Config:]]
- [[#dired-directory-manager-config][Dired Directory Manager Config:]]
- [[#miscellaneous-stuff][Miscellaneous Stuff:]]
- [[#config-for-nyxt-elisp-browser][Config for Nyxt (elisp) browser:]]
- [[#journaling-with-org-roam][Journaling with Org-Roam]]
- [[#completion][Completion:]]

* Introduction:
General parameters for setting up emacs environment. This includes theming, window parameters, modeline parameters and font style setting.  

#+begin_src emacs-lisp
(setq user-full-name "Edward R. Klebanow"
      user-mail-address "klebane@outlook.com")

(setq doom-theme 'doom-vibrant)
(setq doom-font (font-spec :family "JetBrains Mono" :size 16)
      doom-big-font (font-spec :family "JetBrains Mono" :size 26)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 16)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))
(setq-default
 delete-by-moving-to-trash t
 tab-width 4
 uniquify-buffer-name-style 'forward
 window-combination-resize t
 x-stretch-cursor t)

(setq undo-limit 80000000
      evil-want-fine-undo t
      auto-save-default t
      inhibit-compacting-font-caches t
      truncate-string-ellipsis "…"
      display-time-24hr-format t)

(delete-selection-mode 1)
(display-time-mode 1)
(display-battery-mode 1)
(global-subword-mode 1)

(setq-default major-mode 'org-mode)

(setq display-line-numbers-type 'relative)

(setq display-time-day-and-date t)

(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

* Email config using Mbsync and Mu4e
Mbsync is used to synchronize emails from outlook.com mail to be presented to Mu4e.  Outgoing mail is gpg encoded. Bookmarks can be made and viewed and incoming e-mail can be sent to graphical browsers for viewing.

#+begin_src emacs-lisp
(after! mu4e
  (setq mu4e-maildir (expand-file-name "~/Maildir/my-outlook")
        mu4e-get-mail-command "mbsync -a"
        mu4e-index-update-in-background t
        mu4e-compose-signature-auto-include t
        mu4e-use-fancy-chars t
        mu4e-view-show-addresses t
        mu4e-view-show-images t
        mu4e-compose-format-flowed t
        mu4e-change-filenames-when-moving t
        mu4e-maildir-shortcuts
         '( ("/Inbox" . ?i)
            ("/Archive" . ?a)
            ("/Drafts" . ?d)
            ("/Deleted" . ?t)
            ("/Sent" . ?s))

         message-send-mail-function 'smtpmail-send-it
         message-signature-file "~/.signature_email"
         message-citation-line-format "On %a %d %b %Y at %R, %f wrote:\n"
         message-citation-line-function 'message-insert-formatted-citation-line
         message-kill-buffer-on-exit t))

(set-email-account! "klebane@outlook.com"
                    '((user-mail-address      . "klebane@outlook.com")
                      (user-full-name         . "Edward Klebanow")
                      (smtpmail-smtp-server   . "smtp-mail.outlook.com")
                      (smtpmail-smtp-service  . 587)
                      (smtpmail-stream-type   . starttls)
                      (smtpmail-debug-info    . t)
                      (mu4e-drafts-folder     . "/Drafts")
                      (mu4e-refile-folder     . "/Archive")
                      (mu4e-sent-folder       . "/Sent")
                      (mu4e-trash-folder      . "/Deleted")
                      (mu4e-update-interval   . 600)
                      )
                    nil)

(global-set-key "\C-cm" 'mu4e)

(setq auth-sources '("~/authinfo.gpg"))
(setq epg-pinentry-mode 'loopback)

(setq mu4e-bookmarks
      `(
	("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
	("flag:unread" "Unread messages" ?n)
        ("date:today..now" "Today's messages" ?t)
        ))

(map!
 :after mu4e
 :map mu4e-view-mode-map
 "C-c g" #'bjm/mu4e-view-go-to-url-gui)

;;(after! mu4e
  ;;  :hook (after-init . mu4e-alert-enable-mode-line-display)
    ;;      (after-init . mu4e-alert-enable-notifications)
  ;;  :config (mu4e-alert-set-default-style 'libnotify))

(after! mu4e
  (add-to-list 'mu4e-view-actions '("browse message" .  mu4e-action-view-in-browser)))


(defun bjm/mu4e-view-go-to-url-gui ()
  "Wrapper for mu4e-view-go-to-url to use gui browser instead of eww"
  (interactive)
  (let ((browse-url-browser-function 'browse-url-default-browser))
    (mu4e-view-go-to-url-gui)))

(setq bookmark-default-file '"/home/eklebanow/bookmarks")
#+end_src
* Elfeed Config for RSS Feeds
The config for Elfeed searches feeds in areas including: linux, news, sports, tech, you tube, reddit and science.  Once entries are selected it goes into split screen views upon which entries can be viewed in the eww browser with surrounding cruff eliminated or they can be sent to graphical browser for viewing.
#+begin_src emacs-lisp

(setq! elfeed-feeds
'(("https://www.cyberciti.biz/feed/" linux)
("https://www.tecmint.com/feed/" linux)
("https://feeds.feedburner.com/d0od" linux)
("https://www.linuxjournal.com/node/feed" linux)
("http://www.linux-magazine.com/rss/feed/lmi_full" linux)
("http://rss.slashdot.org/Slashdot/slashdotLinux" linux)
("https://www.youtube.com/feeds/videos.xml?user=TheRibalinux" linux)
("https://itsfoss.com/feed" linux)
("https://news.google.com/news?cf=all&hl=en&pz=1&ned=us&q=linux&output=rss" linux)
("https://www.phoronix.com/rss.php" linux)
("https://www.unixmen.com/feed/" linux)
("https://www.linoxide.com/feed" linux)
("https://www.blogger.com/feeds/5398236625900904090/posts/default" linux)
("http://www.linuxandubuntu.com/1/feed" linux)
("https://www.linuxtoday.com/biglt.rss" linux)
("https://lxer.com/module/newswire/headlines.rss" linux)
("https://linuxhint.com/feed/" linux)
("https://sysads.co.uk/feed" linux)
("https://freedompenguin.com/feed/" linux)
;;("news" :elfeed:)
("http://rss.cnn.com/rss/cnn_topstories.rss" news)
("http://dowjones.net/rss/" news)
("http://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml" news)
("http://www.npr.org/rss/rss.php?id=1001" news)
("http://rssfeeds.usatoday.com/usatoday-NewsTopStories" news)
;;("sports" :elfeed:)
("http://www.si.com/rss/si_topstories.rss" sports)
("http://www.si.com/rss/si_topstories.rss" sports)
("https://rss.nytimes.com/services/xml/rss/nyt/Sports.xml" sports)
("https://talksport.com/rss/sports-news/all/feed" sports)
("http://feeds.sport24.co.za/articles/Sport/Featured/TopStories/rss" sports)
("http://rss.cnn.com/rss/edition_sport.rss" sports)
;;("tech" :elfeed:):
("https://techcrunch.com/rssfeeds/" tech)
("http://rss.slashdot.org/Slashdot/slashdot" tech)
("https://spetrum.ieee.org/rss/blog/tech-talk/fulltext" tech)
("https://www.techworld.com/news/rss" tech)
("https://www.wired.com/feed" tech)
("https://rss.nytimes.com/services/xml/rss/nyt/Technology.xml" tech)
;;("YouTube" :elfeed:)
("https://www.youtube.com/feeds/videos.xml?channel_id=UCAPR27YUyxmgwm3Wc2WSHLw" YouTube)
("https://www.youtube.com/feeds/videos.xml?channel_id=UCW6J17hZ_Vgr6cQgd_kHt5A" YouTube)
("https://www.youtube.com/feeds/videos.xml?channel_id=UCc6MhFTqnuIpEGgLBm_jwtw" YouTube)
("https://www.youtube.com/feeds/videos.xml?channel_id=UC0A3ldncnGQ1M_RU2Wb4L2A" YouTube)
("https://www.youtube.com/feeds/videos.xml?channel_id=UCkTweJExGMqp3NLvzvOn-yg" YouTube)
("https://www.youtube.com/feeds/videos.xml?channel_id=UCqh8w-GY6v0vgwIn_iWt87A" YouTube)
;;("reddit" :elfeed:)
("https://www.reddit.com/r/MacOS/comments/8vsd3k/macbook_pro_13_2017_or_lenovo_carbon_x1_6_gen_for/.rss" reddit)
;;("science" :elfeed:)
("http://feeds.nature.com/nature/rss/current" science)
("https://rss.nytimes.com/services/xml/rss/nyt/Science.xml" science)
("https://rss.nytimes.com/services/xml/rss/nyt/Health.xml" science)
))

;;(setq browse-url-browser-function '((".*youtube.*" . browse-url-default-browser) ("." . eww-browse-url)))
(setq browse-url-browser-function 'eww-browse-url)

(global-set-key "\C-ce" 'elfeed-new-search)
(defun bjm/elfeed-show-visit-gui ()
  "Wrapper for elfeed-show-visit to use gui browser instead of eww"
  (interactive)
  (let ((browse-url-generic-program "qutebrowser"))
                  (elfeed-show-visit t)))

(global-set-key (kbd "C-x w") 'elfeed)

(defun bjm/elfeed-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))
(defun bjm/elfeed-show-tech ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-tech"))
(defun bjm/elfeed-show-news ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-news"))
(defun bjm/elfeed-show-science ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-science"))
(defun bjm/elfeed-show-YouTube ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-YouTube"))
(defun bjm/elfeed-show-sports ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-sports"))

(after! elfeed
(set-face-attribute 'elfeed-search-unread-title-face
                      nil
                      :weight 'normal
                      :foreground (face-attribute 'default :foreground)))
(map!
 :after elfeed
 :map elfeed-search-mode-map
 "C-c u" #'elfeed-update)

(map!
:after elfeed
:map elfeed-search-mode-map
   "C-c a" #'bjm/elfeed-show-all
   "C-c t" #'bjm/elfeed-show-tech
   "C-c s" #'bjm/elfeed-show-sports
   "C-c y" #'bjm/elfeed-show-YouTube
   "C-c w" #'bjm/elfeed-show-science
   "C-c n" #'bjm/elfeed-show-news)

(map!
 :after elfeed
 :map elfeed-show-mode-map
 "C-c g" #'bjm/elfeed-show-visit-gui)

;;(after! elfeed
;;(setq link-hint t)
;;   :bind ("C-c f" . link-hint-open-link))

(after! elfeed
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)
(add-hook 'elfeed-show-mode-hook 'visual-line-mode)
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
(kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(setq elfeed-goodies/tag-column-width 12)
(setq elfeed-goodies/log-window-position 'bottom)
(setq elfeed-goodies/log-window-size 0.8)
(setq elfeed-goodies/powerline-default-separator 'arrow))

(defcustom eww-buffer-max-height 0.7
  "Maximum height for the eww buffer window."
  :group 'eww
  :type 'integer)
(setq eww-buffer-max-height 0.7)

#+end_src

#+RESULTS:
: 0.7

* Config for IRC Chat Using Circe:
#+begin_src emacs-lisp
(after! circe
  (set-irc-server! "irc.us.libera.chat"
	    '(:tls t
	      :port 6697
	      :nick "klebane"
	      :sasl-username "klebane"
	      :sasl-password "dairycow"
	      :channels ("#gentoo"))))
#+end_src

* Config for Org-Mode:
Setup for org documents including wrapping, spell checking, dictionary use and org-capture templates.  I-spell is used instead of A-spell.  Searching is by swiper
#+begin_src emacs-lisp

(setq org-journal-enable-agenda-integration 't)

(defun efs/org-mode-setup ()
  (org-indent-mode)
  (visual-line-mode 1))

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

;(ivy-mode 1)
;(setq ivy-use-virtual-buffers t)
;(setq ivy-count-format "(%d/%d)")

(global-set-key "\C-s" 'swiper)

(after! flyspell (require 'flyspell-lazy) (flyspell-lazy-mode 1))

(after! flyspell (add-hook 'text-mode-hook 'flyspell-mode))
   (setq ispell-program-name "hunspell")
   (setq ispell-dictionary "en_US")

(global-set-key "\C-ck" 'flyspell-correct-previous)

(setq +org-capture-journal-file '"~/cal/journal.org")
(after! org
  (setq org-startup-indented t)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (setq org-superstar-headline-bullets-list '("⁖"))
  (setq org-agenda-files '("~/org/"))
  (setq org-odt-preferred-output-format "doc")
  (add-hook 'org-mode-hook 'flyspell-mode))

(after! org-mode
  :hook (org-mode . efs/org-mode-setup))

(after! org-mode
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

* Config for Vuiet Music Player:
The vuiet music player is used with keybindings for shortcuts.

#+begin_src emacs-lisp
(global-set-key "\C-cl" 'vuiet-play-loved-tracks)
(global-set-key "\C-cs" 'vuiet-stop)
;;(global-set-key "\C-cn" 'vuiet-next)
#+end_src
* Eshell Config:
#+begin_src emacs-lisp
(eshell-git-prompt-use-theme 'powerline)
#+end_src
* Dired Directory Manager Config:
#+begin_src emacs-lisp

(setq dired-guess-shell-alist-user '(("\\.pdf$" "nohup xdg-open * </dev/null >/dev/null 2>&1 &")))
#+end_src

* Miscellaneous Stuff:
#+begin_src emacs-lisp

(custom-set-variables
 '(package-selected-packages
   (quote
    (powerline telephone-line company-try-hard mu4e-alert flyspell-correct-ivy helm-flyspell flyspell-correct-helm flyspell-correct-avy-menu flyspell-lazy info-colors elfeed-org org-msg youdao-dictionary swiper-helm vuiet org-journal link-hint excorporate eww-lnum counsel company calfw-ical)))
 '(send-mail-function (quote smtpmail-send-it)))
(custom-set-faces
 '(default ((t (:background "#2a2e38")))))
#+end_src
* Config for Nyxt (elisp) browser:

Call an Emacs command and have a Nyxt open and listen to us from a REPEL. We need to run the browser, and to connect Swank and Slime.
#+begin_src emacs-lisp

;;(setq engine/browser-function 'nyxt-browse-url)

(after! engine-mode

(defun my/start-and-connect-to-nyxt (&optional no-maximize)
  "Start Nyxt with swank capabilities."
  (interactive)
  (async-shell-command (format "nyxt -e \"(nyxt-user::start-swank)\""))
  (sleep-for my/slime-nyxt-delay)
  (my/slime-connect "localhost" "4006")
  (unless no-maximize (my/slime-repl-send-string "(toggle-fullscreen)")))

(defun my/slime-connect (host port)
  (defun true (&rest args) 't)
  (advice-add 'slime-check-version :override #'true)
  (slime-connect host port)
  (sleep-for my/slime-nyxt-delay)
  (advice-remove 'slime-check-version #'true))

(defun my/slime-repl-send-string (sexp)
  (defun true (&rest args) 't)
  (advice-add 'slime-check-version :override #'true)
  (if (slime-connected-p)
      (slime-repl-send-string sexp)
    (error "Slime is not connected to Nyxt. Run `my/start-and-connect-to-nyxt' first."))
  (sleep-for my/slime-nyxt-delay)
  (advice-remove 'slime-check-version #'true))

(defun my/browse-url-nyxt (url &optional buffer-title)
  (interactive "sURL: ")
  (my/slime-repl-send-string
   (format
    "(buffer-load \"%s\" %s)"
    url
    (if buffer-title (format ":buffer (make-buffer :title \"%s\")" buffer-title) ""))))

(defun browse-url-nyxt (url &optional new-window)
  (interactive "sURL: ")
  (unless (slime-connected-p) (my/start-and-connect-to-nyxt))
  (my/browse-url-nyxt url)))
(defengine amazon
  "https://www.amazon.com/s/ref=nb_sb_noss?field-keywords=%s")

(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")

(defengine github
  "https://github.com/search?ref=simplesearch&q=%s")

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")

(defengine google-images
  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

(defengine google-maps
  "http://maps.google.com/maps?q=%s"
  :docstring "Mappin' it up.")

(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s")

(defengine twitter
  "https://twitter.com/search?q=%s")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w"
  :docstring "Searchin' the wikis.")

(defengine wiktionary
  "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

(defengine youtube
  "http://www.youtube.com/results?aq=f&oq=&search_query=%s")
  #+end_src
* Journaling with Org-Roam
Org-Roam is set up to be my second brain.  I can capture information on a certain date and time and then revisit it as necessary...no memory required       .

 #+begin_src emacs-lisp
(after! org
  (use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  (map! :leader
        :prefix "n"
        :desc "org-roam" "l" #'org-roam-buffer-toggle
        :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        :desc "org-roam-node-find" "f" #'org-roam-node-find
        :desc "org-roam-ref-find" "r" #'org-roam-ref-find
        :desc "org-roam-show-graph" "g" #'org-roam-show-graph
        :desc "org-roam-capture" "c" #'org-roam-capture)
  :config
  (org-roam-setup)))

  (add-hook 'org-roam-mode-hook #'turn-on-visual-line-mode)
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n")
           :unnarrowed t)))
 (use-package! org-roam-dailies
  :init
  (map! :leader
        :prefix "n"
        :desc "org-roam-dailies-capture-today" "j" #'org-roam-dailies-capture-today)
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%I:%M %p>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies))
  #+end_src
* Completion:
Use vertico for streamlined completion and other niceties provided by marginalia.
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src
  #+RESULTS:
  : org-roam-dailies-capture-tomorrow
